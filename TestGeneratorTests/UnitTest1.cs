using NUnit.Framework.Internal;
using TestGenerator.Core;

namespace TestGeneratorTests;

public class Tests
{
    private UnitTestGenerator _testGenerator;
    [SetUp]
    public void Setup()
    {
        _testGenerator = new UnitTestGenerator();
    }

    [Test]
    public void CountOfTestClasses()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program3);
        Assert.That(result.Count, Is.EqualTo(2));
    }
    
    [Test]
    public void LongUsings()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program1);
        Assert.That(result[0].GeneratedCode.Contains("using FirstExample.ExampleProject;"), Is.True);
    }
    
    [Test]
    public void LongNamespace()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program1);
        Assert.That(result[0].GeneratedCode.Contains("namespace FirstExample.ExampleProject.Test"), Is.True);
    }

    [Test]
    public void MethodCount()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program1);
        Assert.That(result[0].GeneratedCode.Contains("SumTest()"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("DesTest()"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("MulTest()"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("HiddenMethodTest()"), Is.False);
    }
    
    [Test]
    public void CreateSetUpMethod()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program2);
        Assert.That(result[0].GeneratedCode.Contains("SetUp()"), Is.True);
    }
    
    [Test]
    public void CorrectSetUp()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program2);
        Assert.That(result[0].GeneratedCode.Contains("num = new Mock<IKitten>();"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("bebra = new Mock<IPuppy>();"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("int chislo = default;"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("_exampleClass2UnderTest = new ExampleClass2(num.Object, bebra.Object, chislo);"), Is.True);
    }
    
    [Test]
    public void CorrectActSection()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program2);
        Assert.That(result[0].GeneratedCode.Contains("int actual = _exampleClass2UnderTest.Method1(num1, num2);"), Is.True);
    }
    
    [Test]
    public void CorrectArrangeSection()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program2);
        Assert.That(result[0].GeneratedCode.Contains("int num1 = default;"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("int num2 = default;"), Is.True);
    }
    
    [Test]
    public void CorrectAssertSection()
    {
        List<UnitTestGenerator.TestInfo> result = _testGenerator.Generate(program2);
        Assert.That(result[0].GeneratedCode.Contains("int expected = default;"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("Assert.That(actual, Is.EqualTo(expected));"), Is.True);
        Assert.That(result[0].GeneratedCode.Contains("Assert.Fail(\"autogenerated\");"), Is.True);
    }
    
    private const string program1 = @"
namespace ExampleProject
{
    namespace FirstExample
    {

        public class ExampleClass
        {
            private int _param1;
            private string[] _param2;

            public int Param1
            {
                get => _param1;
                set => _param1 = value;
            }

            public string[] Param2
            {
                get => _param2;
                set => _param2 = value;
            }

            public int Sum(int num1, int num2)
            {
                return num1 + num2;
            }

            public int Des(int num1, int num2)
            {
                return num1 - num2;
            }

            public int Mul(int num1, int num2)
            {
                return num1 * num2;
            }

            private void HiddenMethod()
            {
                return;
            }
        }
    }
}";

    private const string program2 = @"namespace ExampleProject;
public class ExampleClass2
{
    private IKitten _num;
    private IPuppy _bebra;
    private int _chislo;

    public ExampleClass2(IKitten num, IPuppy bebra, int chislo)
    {
        _num = num;
        _bebra = bebra;
        _chislo = chislo;
    }
    
    public int Method1(int num1, int num2)
    {
        return num1 + num2;
    }

    public void Method2(int n)
    {
        return;
    }

    private void HiddenMethod()
    {
        return;
    }
}";

    private const string program3 = @"
namespace ExampleProject;

public class Kitten
{
    public int Eat(int hours)
    {
        return hours;
    }
}
public class Puppy
{
    public int Play(string[] toy)
    {
        return toy.Length;
    }
}";
}